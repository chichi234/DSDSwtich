package com.reb.switchbt.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_BOND".
*/
public class DeviceBondDao extends AbstractDao<DeviceBond, String> {

    public static final String TABLENAME = "DEVICE_BOND";

    /**
     * Properties of entity DeviceBond.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Mac = new Property(0, String.class, "mac", true, "MAC");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Insert_time = new Property(2, String.class, "insert_time", false, "INSERT_TIME");
        public final static Property Display_name = new Property(3, String.class, "display_name", false, "DISPLAY_NAME");
        public final static Property Psw = new Property(4, String.class, "psw", false, "PSW");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
    }


    public DeviceBondDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceBondDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_BOND\" (" + //
                "\"MAC\" TEXT PRIMARY KEY NOT NULL ," + // 0: mac
                "\"NAME\" TEXT," + // 1: name
                "\"INSERT_TIME\" TEXT," + // 2: insert_time
                "\"DISPLAY_NAME\" TEXT," + // 3: display_name
                "\"PSW\" TEXT," + // 4: psw
                "\"TYPE\" INTEGER NOT NULL );"); // 5: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_BOND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceBond entity) {
        stmt.clearBindings();
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(1, mac);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String insert_time = entity.getInsert_time();
        if (insert_time != null) {
            stmt.bindString(3, insert_time);
        }
 
        String display_name = entity.getDisplay_name();
        if (display_name != null) {
            stmt.bindString(4, display_name);
        }
 
        String psw = entity.getPsw();
        if (psw != null) {
            stmt.bindString(5, psw);
        }
        stmt.bindLong(6, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceBond entity) {
        stmt.clearBindings();
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(1, mac);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String insert_time = entity.getInsert_time();
        if (insert_time != null) {
            stmt.bindString(3, insert_time);
        }
 
        String display_name = entity.getDisplay_name();
        if (display_name != null) {
            stmt.bindString(4, display_name);
        }
 
        String psw = entity.getPsw();
        if (psw != null) {
            stmt.bindString(5, psw);
        }
        stmt.bindLong(6, entity.getType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DeviceBond readEntity(Cursor cursor, int offset) {
        DeviceBond entity = new DeviceBond( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mac
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // insert_time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // display_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // psw
            cursor.getInt(offset + 5) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceBond entity, int offset) {
        entity.setMac(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInsert_time(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDisplay_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPsw(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DeviceBond entity, long rowId) {
        return entity.getMac();
    }
    
    @Override
    public String getKey(DeviceBond entity) {
        if(entity != null) {
            return entity.getMac();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceBond entity) {
        return entity.getMac() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
